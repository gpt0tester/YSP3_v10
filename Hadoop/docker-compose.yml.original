
version: "3.8"

services:
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zookeeper2:2888:3888;2182 server.3=zookeeper3:2888:3888;2183
    networks:
      - bigdata_network
    volumes:
      - ./zookeeper-conf/zoo.cfg:/conf/zoo.cfg
      - ../.env/zookeeper_data:/var/lib/zookeeper/data
      - ../.env/zookeeper_txn_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181" # Client port
      - "2888:2888" # Leader election port
      - "3888:3888" # Leader communication port

  zookeeper2:
    image: zookeeper:latest
    container_name: zookeeper2
    restart: always
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zookeeper2:2888:3888;2182 server.3=zookeeper3:2888:3888;2183
    networks:
      - bigdata_network
    volumes:
      - ./zookeeper-conf/zoo.cfg:/conf/zoo.cfg
      - ../.env/zookeeper2_data:/var/lib/zookeeper/data
      - ../.env/zookeeper2_txn_logs:/var/lib/zookeeper/log
    ports:
      - "2182:2181"
      - "2889:2888"
      - "3889:3888"

  zookeeper3:
    image: zookeeper:latest
    container_name: zookeeper3
    restart: always
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zookeeper2:2888:3888;2182 server.3=zookeeper3:2888:3888;2183
    networks:
      - bigdata_network
    volumes:
      - ./zookeeper-conf/zoo.cfg:/conf/zoo.cfg
      - ../.env/zookeeper3_data:/var/lib/zookeeper/data
      - ../.env/zookeeper3_txn_logs:/var/lib/zookeeper/log
    ports:
      - "2183:2181"
      - "2890:2888"
      - "3890:3888"

  zoonavigator:
    image: elkozmon/zoonavigator:latest
    container_name: zoonavigator
    restart: unless-stopped
    environment:
      - HTTP_PORT=8800
    ports:
      - "8800:8800"
    networks:
      - bigdata_network
    depends_on:
      - zookeeper

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - bigdata_network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"

  kafka-connect:
    image: debezium/connect:3.0.0.Final
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=connect-cluster
      - CONFIG_STORAGE_TOPIC=my-connect-configs
      - OFFSET_STORAGE_TOPIC=my-connect-offsets
      - STATUS_STORAGE_TOPIC=my-connect-status
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect
      - CONNECT_REST_PORT=8083
      - CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/java/kafka-connect-solr
    volumes:
      - ./plugins:/usr/share/java/kafka-connect-solr
    depends_on:
      - kafka
    networks:
      - bigdata_network

  hadoop-namenode:
    image: apache/hadoop:3.4.1
    container_name: hadoop-namenode
    networks:
      - bigdata_network
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./hadoop-config:/etc/hadoop
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - HADOOP_CONF_DIR=/etc/hadoop
      - HADOOP_HOME=/opt/hadoop
    command: ["/opt/hadoop/bin/hdfs", "datanode"]

  hadoop-datanode:
    image: apache/hadoop:3.4.1
    container_name: hadoop-datanode
    networks:
      - bigdata_network
    depends_on:
      - hadoop-namenode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
      - ./hadoop-config:/etc/hadoop
    ports:
      - "9864:9864"
    environment:
      - HADOOP_CONF_DIR=/etc/hadoop
      - HADOOP_HOME=/opt/hadoop
    command: ["/opt/hadoop/bin/hdfs", "datanode"]

  spark-master:
    image: apache/spark:latest
    container_name: spark-master
    networks:
      - bigdata_network
    environment:
      - SPARK_MODE=master
      - SPARK_NO_DAEMONIZE=true
    ports:
      - "8080:8080"
      - "7077:7077"
    command:
      ["/bin/bash", "-c", "/opt/spark/sbin/start-master.sh --host spark-master"]
    depends_on:
      - hadoop-namenode
      - hadoop-datanode

  spark-worker:
    image: apache/spark:latest
    container_name: spark-worker
    networks:
      - bigdata_network
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_NO_DAEMONIZE=true
    ports:
      - "8081:8081"
    command:
      [
        "/bin/bash",
        "-c",
        "/opt/spark/sbin/start-worker.sh spark://spark-master:7077",
      ]
    depends_on:
      - spark-master

  solr:
    image: solr:latest
    container_name: solr
    restart: unless-stopped
    networks:
      - bigdata_network
    command: solr -f -c -z zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    # command: solr create_collection -c mycollection -shards 2 -replicationFactor 2 -z zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    ports:
      - "8983:8983"
    environment:
      # 1) Increase Solr's JVM heap size (example: 4GB)
      SOLR_HEAP: "4g"
      # 2) Enable basic authentication via JVM system properties.
      SOLR_OPTS: > 
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -Dsolr.authentication.class=org.apache.solr.security.BasicAuthPlugin
        -Dsolr.basicAuth.username=solr
        -Dsolr.basicAuth.password=123456789
        -Dsolr.allow.unsafe.resourceloading=true
        -Dsolr.max.boolean.clauses=4096
    volumes:
      - solr1_data:/var/solr
    depends_on:
      - zookeeper
      - zookeeper2
      - zookeeper3
    # healthcheck:
      # test:
        # ["CMD", "curl", "-f", "http://localhost:8983/solr/admin/info/system"]
      # interval: 10s
      # timeout: 5s
      # retries: 5

  solr2:
    image: solr:latest
    container_name: solr2
    restart: unless-stopped
    networks:
      - bigdata_network
    command: solr -f -c -z zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    # command: solr create_collection -c mycollection -shards 2 -replicationFactor 2 -z zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    ports:
      - "8984:8983"
    environment:
      # 1) Increase Solr's JVM heap size (example: 4GB)
      SOLR_HEAP: "4g"
      # 2) Enable basic authentication via JVM system properties.
      SOLR_OPTS: > 
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -Dsolr.authentication.class=org.apache.solr.security.BasicAuthPlugin
        -Dsolr.basicAuth.username=solr
        -Dsolr.basicAuth.password=123456789
        -Dsolr.allow.unsafe.resourceloading=true
        -Dsolr.max.boolean.clauses=4096
    volumes:
      - solr2_data:/var/solr
    depends_on:
      - zookeeper
      - zookeeper2
      - zookeeper3
    # healthcheck:
      # test:
        # ["CMD", "curl", "-f", "http://localhost:8983/solr/admin/info/system"]
      # interval: 10s
      # timeout: 5s
      # retries: 5

  solr3:
    image: solr:latest
    container_name: solr3
    restart: unless-stopped
    networks:
      - bigdata_network
    command: solr -f -c -z zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    # command: solr create_collection -c mycollection -shards 2 -replicationFactor 2 -z zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    ports:
      - "8985:8983"
    environment:
      # 1) Increase Solr's JVM heap size (example: 4GB)
      SOLR_HEAP: "4g"
      # 2) Enable basic authentication via JVM system properties.
      SOLR_OPTS: > 
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -Dsolr.authentication.class=org.apache.solr.security.BasicAuthPlugin
        -Dsolr.basicAuth.username=solr
        -Dsolr.basicAuth.password=123456789
        -Dsolr.allow.unsafe.resourceloading=true
        -Dsolr.max.boolean.clauses=4096
    volumes:
      - solr3_data:/var/solr
    depends_on:
      - zookeeper
      - zookeeper2
      - zookeeper3
    # healthcheck:
      # test:
        # ["CMD", "curl", "-f", "http://localhost:8983/solr/admin/info/system"]
      # interval: 10s
      # timeout: 5s
      # retries: 5

  nifi:
    image: apache/nifi:1.28.1
    container_name: nifi
    restart: unless-stopped
    networks:
      - bigdata_network
    ports:
      - "8088:8088"
    environment:
      # - NIFI_WEB_HTTPS_PORT=8444
      - NIFI_WEB_HTTP_PORT=8088
      - NIFI_WEB_PROXY_HOST=192.168.94.129:8088
      # - NIFI_CLUSTER_IS_NODE=true
      # - NIFI_CLUSTER_NODE_ADDRESS=nifi
      # - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      # - NIFI_ZOOKEEPER_CONNECT_STRING=zookeeper:2181,zookeeper2:2181,zookeeper3:2181
      # - NIFI_SENSITIVE_PROPS_KEY=BoX3C0AzSltsqwFLnnD+LO2iLbbo7+iZgOQfH93M7iM=
    volumes:
      # - ./nifi-conf/nifi.properties.template:/opt/nifi/nifi-current/conf/nifi.properties.template
      # - ./nifi-conf/authorizers.xml:/opt/nifi/nifi-current/conf/authorizers.xml
      # - ./nifi-conf/login-identity-providers.xml:/opt/nifi/nifi-current/conf/login-identity-providers.xml
      - ./certs:/opt/nifi/certs
    depends_on:
      - zookeeper
      - zookeeper2
      - zookeeper3

  nifi_2.0.0:
    image: apache/nifi:latest
    container_name: nifi_2.0.0
    networks:
      - bigdata_network
    ports:
      - "8443:8443"
    depends_on:
      - zookeeper

  mongo1:
    image: mongo:8.0.3
    container_name: mongo1
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: 123456789 # Must match primary
      MONGO_INITDB_DATABASE: mydatabase
    ports:
      - "27017:27017"
    volumes:
      - mongo1_data:/data/db
      - ../.env/mongodb_keyfile/mongodb-keyfile:/data/configdb/keyfile
    networks:
      - bigdata_network
    command:
      [
        "mongod",
        "--replSet",
        "rs0",
        "--auth",
        "--keyFile",
        "/data/configdb/keyfile",
        "--bind_ip_all",
      ]
    depends_on:
      - zookeeper
      - zookeeper2
      - zookeeper3

  mongo2:
    image: mongo:8.0.3
    container_name: mongo2
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: 123456789 # Must match primary
      MONGO_INITDB_DATABASE: mydatabase
    ports:
      - "27018:27017"
    volumes:
      - mongo2_data:/data/db
      - ../.env/mongodb_keyfile/mongodb-keyfile:/data/configdb/keyfile
    networks:
      - bigdata_network
    command:
      [
        "mongod",
        "--replSet",
        "rs0",
        "--auth",
        "--keyFile",
        "/data/configdb/keyfile",
        "--bind_ip_all",
      ]
    depends_on:
      - mongo1

  mongo3:
    image: mongo:8.0.3
    container_name: mongo3
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: 123456789 # Must match primary
      MONGO_INITDB_DATABASE: mydatabase
    ports:
      - "27019:27017"
    volumes:
      - mongo3_data:/data/db
      - ../.env/mongodb_keyfile/mongodb-keyfile:/data/configdb/keyfile
    networks:
      - bigdata_network
    command:
      [
        "mongod",
        "--replSet",
        "rs0",
        "--auth",
        "--keyFile",
        "/data/configdb/keyfile",
        "--bind_ip_all",
      ]
    depends_on:
      - mongo1

    # Redis service
  redis:
    image: redis:latest # or another stable version
    container_name: redis
    restart: always
    networks:
      - bigdata_network
    ports:
      - "6379:6379"

  backend:
    image: ysp3_backend:10
    container_name: backend-dev
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456789
      - MONGO_INITDB_DATABASE=Search
      # - MONGO_HOST=192.168.94.129:27017,192.168.94.129:27018,192.168.94.129:27019
      - MONGO_HOST=mongo1:27017,mongo2:27018,mongo3:27019
      # - MONGO_HOST=${HOST_IP}:27017,${HOST_IP}:27018,${HOST_IP}:27019
      - REPLICA_SET_NAME=rs0
      - AUTH_SOURCE=admin
      - READ_PREFERENCE=secondaryPreferred
      # - MONGO_TLS=false
      # - MONGO_TLS_CERT_FILE=./cert/cert.pem
      - SOLR_HOST=http://solr:8983/solr
      - SOLR_AUTH_USER=solr
      - SOLR_AUTH_PASSWORD=123456789
      # - SOLR_QUERY=http://192.168.94.129:8983/solr/investigations/select
      # - SOLR_COLLECTIONS_LIST=http://${HOST_IP}:8983/solr/admin/collections?action=LIST&wt=json
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NIFI_BASE_URL=http://nifi:8088/nifi-api
      - NIFI_USERNAME=nifiUser
      - NIFI_PASSWORD=nifiPass
      - ZOOKEEPER_CONNECTION_STRING=zookeeper:2181,zookeeper2:2181,zookeeper3:2181
    volumes:
      - ./:/usr/src/app
    networks:
      - bigdata_network

  frontend:
    image: ysp3_frontend:10
    container_name: frontend-dev
    restart: unless-stopped
    ports:
      - "3000:80"
    # environment:
      # - API_BASE_URL=http://192.168.94.129:5000/api
    volumes:
      - ./frontend:/app
    networks:
      - bigdata_network
    depends_on:
      - backend

volumes:
  hadoop_namenode:
  hadoop_datanode:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongodb_keyfile:
  solr1_data:
  solr2_data:
  solr3_data:

networks:
  bigdata_network:
    driver: bridge
